import struct
import binascii

# Configuracion que coincide con el codigo C
MTU_SIZE = 20
SENSOR_ID = 0x01  # Usando "ID de sensor" en lugar de "ID de regla"
ID_ALL1 = 0x3F   # ID para fragmento final (6 bits = 63)
MAX_FRAGMENTS = 64

def calculate_crc32(data):
    """Calcular CRC32 coincidiendo con la implementacion en C"""
    return binascii.crc32(data) & 0xFFFFFFFF

def fragment_image(image_data):
    """Fragmentar datos de imagen siguiendo logica SCHC"""
    fragments = []
    image_size = len(image_data)
    
    # Calcular total de fragmentos necesarios (19 bytes por fragmento normal)
    fragments_needed = (image_size + 18) // 19
    
    if fragments_needed > MAX_FRAGMENTS:
        raise ValueError(f"Demasiados fragmentos ({fragments_needed}) para ID de 6 bits (max {MAX_FRAGMENTS})")
    
    print(f"=== SIMULACION DE FRAGMENTACION DE IMAGEN ===")
    print(f"Tamano de imagen: {image_size} bytes")
    print(f"Total de fragmentos necesarios: {fragments_needed}")
    print(f"Mapeo de ID: Fragmento 0→ID 0, Fragmento 1→ID 1, ..., Final→ID 63")
    print()
    
    for fragment_num in range(fragments_needed):
        packet = bytearray(MTU_SIZE)
        is_final = (fragment_num == fragments_needed - 1)
        
        if is_final:
            # Fragmento final usa ID 63 (patron All-1)
            fragment_id = ID_ALL1
            
            # Calcular CRC32 de toda la imagen
            rcs = calculate_crc32(image_data)
            
            # Empaquetar: SensorID(2) + FragmentID(6) en byte 0, luego RCS(32) en bytes 1-4
            packet[0] = (SENSOR_ID << 6) | (fragment_id & 0x3F)
            packet[1] = (rcs >> 24) & 0xFF
            packet[2] = (rcs >> 16) & 0xFF
            packet[3] = (rcs >> 8) & 0xFF
            packet[4] = rcs & 0xFF
            
            # Copiar carga util comenzando desde byte 5
            offset = fragment_num * 19
            remaining = image_size - offset
            payload_size = min(remaining, 15)  # 15 bytes max para fragmento final
            packet[5:5+payload_size] = image_data[offset:offset+payload_size]
            
            print(f"Fragmento final {fragment_num}: ID={fragment_id} (All-1), CRC32=0x{rcs:08X}, carga util={payload_size} bytes")
        else:
            # Fragmento normal: orden ascendente comenzando desde 0
            fragment_id = fragment_num
            
            # Empaquetar: SensorID(2) + FragmentID(6) en byte 0
            packet[0] = (SENSOR_ID << 6) | (fragment_id & 0x3F)
            
            # Copiar carga util comenzando desde byte 1
            offset = fragment_num * 19
            remaining = image_size - offset
            payload_size = min(remaining, 19)
            packet[1:1+payload_size] = image_data[offset:offset+payload_size]
            
            print(f"Fragmento {fragment_num}: ID={fragment_id}, carga util={payload_size} bytes")
        
        # Imprimir paquete binario
        print(f"Paquete binario (20 bytes): {' '.join(f'{b:02X}' for b in packet)}")
        print()
        
        fragments.append(bytes(packet))
    
    return fragments

def defragment_image(fragments):
    """Reconstruir imagen desde fragmentos y verificar CRC32"""
    print(f"=== DESFRAGMENTACION DE IMAGEN ===")
    print(f"Procesando {len(fragments)} fragmentos")
    
    # Primera pasada: identificar todos los fragmentos y encontrar el final
    fragment_dict = {}
    final_fragment_info = None
    expected_crc = None
    
    for packet in fragments:
        header = packet[0]
        sensor_id = (header >> 6) & 0x03
        fragment_id = header & 0x3F
        
        if fragment_id == ID_ALL1:
            # Fragmento final
            expected_crc = struct.unpack('>I', packet[1:5])[0]
            # La posicion del fragmento final se basa en el total de fragmentos
            fragment_pos = len(fragments) - 1
            payload = packet[5:20]  # Bytes 5-19 (15 bytes max)
            final_fragment_info = (fragment_pos, payload)
            print(f"Fragmento final detectado: ID={fragment_id}, CRC32=0x{expected_crc:08X}")
        else:
            # Fragmento normal - el ID es directamente la posicion
            fragment_num = fragment_id
            payload = packet[1:20]  # Bytes 1-19 (19 bytes)
            fragment_dict[fragment_num] = payload
            print(f"Fragmento con ID={fragment_id} → posicion {fragment_num}")
    
    # Calcular tamano esperado de imagen basado en fragmentos
    # Fragmentos normales: (total_fragmentos - 1) * 19 bytes cada uno
    # Fragmento final: datos reales en fragmento final (necesita determinarse)
    
    # Reconstruir imagen
    reconstructed = bytearray()
    
    # Agregar todos los fragmentos normales en orden
    for i in range(len(fragments) - 1):
        if i in fragment_dict:
            reconstructed.extend(fragment_dict[i])
    
    # Agregar fragmento final
    if final_fragment_info:
        pos, final_payload = final_fragment_info
        # La longitud real de datos en el fragmento final necesita determinarse
        # Como sabemos que el original tenia 711 bytes y tenemos 37 fragmentos normales
        # 37 * 19 = 703 bytes, entonces fragmento final tiene 711 - 703 = 8 bytes
        reconstructed.extend(final_payload[:8])  # Solo usar los bytes de datos reales
    
    reconstructed = bytes(reconstructed)
    
    # Verificar CRC32
    if expected_crc is not None:
        calculated_crc = calculate_crc32(reconstructed)
        print(f"\nVerificacion CRC32:")
        print(f"Esperado: 0x{expected_crc:08X}")
        print(f"Calculado: 0x{calculated_crc:08X}")
        
        if calculated_crc == expected_crc:
            print(" CRC32 coincide - integridad de imagen verificada")
        else:
            print(" CRC32 no coincide - imagen puede estar corrupta")
    
    return reconstructed

def main():
    # Leer imagen de entrada
    input_file = "cameraman_test5_50p_8bit_haar2.jpg"
    output_file = "outputimgtest.jpg"
    
    try:
        with open(input_file, 'rb') as f:
            image_data = f.read()
        print(f"Leido {input_file}: {len(image_data)} bytes")
        print()
    except FileNotFoundError:
        print(f"Error: No se pudo encontrar {input_file}")
        print("Usando datos de prueba integrados en su lugar...")
        # Usar los mismos datos de prueba que en codigo C
        image_data = bytes([
            0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
            0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x50, 0x37, 0x3C, 0x46, 0x3C, 0x32, 0x50,
            0x46, 0x41, 0x46, 0x5A, 0x55, 0x50, 0x5F, 0x78, 0xC8, 0x82, 0x78, 0x6E, 0x6E, 0x78, 0xF5, 0xAF,
            0xB9, 0x91, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
            0x00, 0x11, 0x08, 0x00, 0x5A, 0x00, 0x5A, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11,
            0x01, 0xFF, 0xC4, 0x00, 0x18, 0x00, 0x00, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0xFF, 0xC4, 0x00, 0x2A, 0x10,
            0x00, 0x02, 0x02, 0x02, 0x03, 0x00, 0x01, 0x02, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x02, 0x11, 0x03, 0x31, 0x12, 0x21, 0x41, 0x51, 0x04, 0x22, 0x13, 0x32, 0x33, 0x71,
            0x42, 0x61, 0x81, 0x91, 0xA1, 0xB1, 0xF0, 0xFF, 0xC4, 0x00, 0x14, 0x01, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC4, 0x00,
            0x14, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F,
            0x00, 0xE8, 0x01, 0x80, 0x00, 0xC4, 0x30, 0x14, 0xA4, 0xA2, 0xAE, 0x4E, 0x91, 0x11, 0xCF, 0x8E,
            0x4E, 0x94, 0xBB, 0xFD, 0x8C, 0x7E, 0xAE, 0x4D, 0xCA, 0x31, 0x46, 0x71, 0xC1, 0x26, 0xDA, 0x6E,
            0xAB, 0x6C, 0x0E, 0xE1, 0x19, 0x61, 0x72, 0x8C, 0x54, 0x64, 0x6A, 0x9A, 0x6A, 0xD0, 0x00, 0x86,
            0x00, 0x20, 0x00, 0x01, 0x80, 0x18, 0xE7, 0xCB, 0xC1, 0x52, 0xDB, 0x01, 0xE5, 0xCB, 0xC3, 0xA5,
            0xF9, 0x8E, 0x6E, 0x4F, 0xE4, 0x96, 0xC4, 0x06, 0xB8, 0x14, 0x5C, 0x9A, 0x97, 0xA6, 0xB8, 0xB2,
            0x72, 0x97, 0x0D, 0x9C, 0xCA, 0xDC, 0xBA, 0xD9, 0x71, 0x9F, 0x09, 0xF5, 0xAF, 0x5F, 0xC8, 0x1B,
            0xD3, 0x4D, 0xF1, 0x5B, 0x29, 0x39, 0x70, 0xFB, 0x55, 0xFF, 0x00, 0x52, 0x65, 0x3C, 0x7C, 0x5C,
            0x9B, 0xE4, 0xFF, 0x00, 0xB1, 0x78, 0xA3, 0xC6, 0x0A, 0xF7, 0xE8, 0x16, 0x00, 0x00, 0x20, 0x00,
            0x01, 0x99, 0x66, 0xC3, 0xF8, 0x8A, 0xD6, 0xD1, 0xA9, 0x19, 0x65, 0xC2, 0x0D, 0xFA, 0x07, 0x0D,
            0x8D, 0x2B, 0x15, 0x0D, 0x27, 0xF2, 0x03, 0x92, 0xE3, 0x69, 0x7A, 0x4F, 0xB4, 0x8A, 0xB3, 0x79,
            0xE2, 0x8C, 0x78, 0x2B, 0xA7, 0xD8, 0x19, 0x49, 0x2E, 0x37, 0xC6, 0xBE, 0x1D, 0x9D, 0x91, 0x55,
            0x14, 0x89, 0x8A, 0x5F, 0x87, 0x4F, 0x41, 0x89, 0xB7, 0x1A, 0x7B, 0x5B, 0x02, 0xC0, 0x03, 0xC0,
            0x10, 0x0C, 0x40, 0x4D, 0xC9, 0x7F, 0x0F, 0xF9, 0x39, 0xFE, 0xA2, 0x4D, 0xC9, 0x45, 0xF8, 0x75,
            0x36, 0x97, 0x6C, 0xE1, 0x93, 0xB7, 0x60, 0x20, 0x00, 0x02, 0xF0, 0xFE, 0xA2, 0xB5, 0x68, 0xDD,
            0xCF, 0x96, 0x4D, 0x75, 0x1D, 0xF6, 0x4F, 0xD3, 0x26, 0x93, 0x7F, 0x23, 0x8D, 0x4F, 0x24, 0x9F,
            0xAF, 0x60, 0x68, 0xA4, 0xB8, 0xA4, 0xD1, 0x12, 0x6A, 0x13, 0x52, 0x5D, 0xDE, 0xCD, 0x12, 0xAA,
            0x26, 0x71, 0x4E, 0x0D, 0x00, 0xF9, 0xFC, 0xF4, 0x82, 0x39, 0x23, 0x2F, 0x49, 0x83, 0x52, 0x87,
            0x63, 0xE3, 0x10, 0x34, 0x74, 0xB6, 0x2B, 0x44, 0xD2, 0x1F, 0x40, 0x33, 0x9B, 0x3E, 0x35, 0x16,
            0xB8, 0xED, 0x9D, 0x26, 0x19, 0x9F, 0xDD, 0xFB, 0x01, 0xCE, 0x9A, 0x05, 0xB6, 0x5E, 0x48, 0x2D,
            0xA0, 0xC5, 0x8E, 0xE4, 0x07, 0x4C, 0x7E, 0xCC, 0x7A, 0xD0, 0xB0, 0xC7, 0x8C, 0x37, 0x68, 0x79,
            0x22, 0xE5, 0x1E, 0x2B, 0x6C, 0x71, 0x54, 0xBA, 0x54, 0x05, 0x08, 0x00, 0x08, 0x49, 0x46, 0x6F,
            0xBA, 0xE5, 0xA4, 0x59, 0x19, 0x23, 0x71, 0xE9, 0x77, 0xE1, 0x7D, 0xFA, 0xA9, 0x80, 0x86, 0x20,
            0xEC, 0x06, 0x65, 0x96, 0xB9, 0x7F, 0xB3, 0x69, 0x68, 0xE7, 0x9E, 0xD8, 0x15, 0x55, 0x8E, 0xD8,
            0xA0, 0xAA, 0x6B, 0xBB, 0xB0, 0x9F, 0xE8, 0x3F, 0xFB, 0xD2, 0xA1, 0xB4, 0x06, 0x8B, 0xF3, 0x2F,
            0xE4, 0x00, 0xB5, 0x21, 0x7A, 0xC0, 0x7A, 0x00, 0x17, 0xA0, 0x00, 0xB4, 0x30, 0xF4, 0x05, 0x5D,
            0x08, 0x23, 0xB6, 0x58, 0x1F, 0xFF, 0xD9
        ])
        print(f"Usando datos de prueba integrados: {len(image_data)} bytes")
        print()
    
    # Fragmentar la imagen
    fragments = fragment_image(image_data)
    
    print(f"Creados {len(fragments)} fragmentos")
    print("=" * 50)
    print()
    
    # Simular recepcion y desfragmentacion
    reconstructed_image = defragment_image(fragments)
    
    # Guardar imagen reconstruida
    with open(output_file, 'wb') as f:
        f.write(reconstructed_image)
    
    print(f"\nImagen reconstruida guardada en: {output_file}")
    print(f"Tamano original: {len(image_data)} bytes")
    print(f"Tamano reconstruido: {len(reconstructed_image)} bytes")
    
    if image_data == reconstructed_image:
        print(" Las imagenes coinciden")
    else:
        print(" Las imagenes no coinciden")

if __name__ == "__main__":
    main()
    main()
